version: "3.9"
volumes:
  kafka-data:
  gateway-logs:  # Define a new volume for gateway logs
  postgres_data:

services:
  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: kafka
    ports:
      - "29092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=5L6g3nShT-eMCtK--X86sw
    volumes:
      - kafka-data:/bitnami/kafka
  ui:
    image: provectuslabs/kafka-ui:v0.4.0
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
    depends_on:
      - kafka

  user_service:
    build:
      context: ./back
      dockerfile: Dockerfile
    command: python user_service.py
    depends_on:
      - kafka
      - ui
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  auth_service:
    build:
      context: ./back
      dockerfile: Dockerfile
    command: python auth_service.py
    depends_on:
      - kafka
      - ui
    environment:
      - DB_HOST=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  gateway:
    build:
      context: ./back
      dockerfile: Dockerfile
    command: ./start.sh
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - ui
    volumes:
      - ./logs:/app/logs  # Map the volume to /app/logs in the container
    environment:
      - DB_HOST=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=development
    depends_on:
      - gateway
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "freelance_db"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5